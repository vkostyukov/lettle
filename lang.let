//
// This is 'lang.let' file - a standard Lettle library. 
// (c) 2013, Vladimir Kostyukov http://vkostyukov.ru
//

// Starting with very base things like 'Unit', which is actually an empty tuple
tuple Unit
let Nothing = Unit

// Predefined tuples
tuple Tuple[A, B](1: A, 2: B)
tuple Tuple[A, B, C](1: A, 2: B, 3: C)
tuple Tuple[A, B, C, D](1: A, 2: B, 3: C, 4: D)
tuple Tuple[A, B, C, D](1: A, 2: B, 3: C, 4: D)
tuple Tuple[A, B, C, D, E](1: A, 2: B, 3: C, 4: D, 5: E)
tuple Tuple[A, B, C, D, E, F](1: A, 2: B, 3: C, 4: D, 5: E, 6: F)

// Friendly aliases for tuples
alias Pair[A, B] = Tuple[A, B]
alias Triple[A, B, C] = Tuple[A, B, C]

// A disjoint Option
union Option[A] = Some of A ? None

// A List
union List[A] = Cons of A * List[A] ? Nil

let head[A](ls: List[A]) = ls 
  ? Cons(hd, _) -> hd
  ! fail "An empty list."

let tail[A](ls: List[A]) = ls
  ? Cons(_, tl) -> tl
  ! fail "An empty list."

let empty[A](ls: List[A]) = ls
  ? Nil -> true
  ! false

let size[A](ls: List[A]) = ls
  ? Cons(_, tl) -> 1 + size tl
  ! 0

let cons[A](x: A, ls: List[A]) = Cons(x, ls)

let snoc[A](x: A, ls: List[A]) = ls
  ? Cons(hd, tl) -> Cons(hd, x | snoc tl)
  ! Cons(x, Nil)

let take[A](ls: List[A], n: Int) =
  if (n == 0) Nil
  else head ls | cons take(tail ls, n - 1)

let map[A, B](ls: List[A], fn: A -> B) = ls
  ? Cons(hd, tl) -> fn hd | cons map(tl, fn)
  ! Nil

let fold[A, B](ls: List[A], neutral: B) = {fn -> foldListLoop(ls, neutral, fn)}
let foldListLoop[A, B](ls: List[A], acc: B, fn: B * A -> B) = ls 
  ? Cons(hd, tl) -> foldListLoop(tl, fn(acc, hd), fn)
  ! acc

let reduce[A](ls: List[A], fn: A * A -> A) = ls
  ? Cons(hd, tl) -> tl | fold(hd) {acc, x -> fn(acc, x)}
  ! fail "An empty list."

let filter[A](ls: List[A], fn: A -> Boolean) = ls
  ? Cons(hd, tl) when (fn hd) -> hd | cons filter(tl, fn)
  ? Cons(_, tl) -> filter(tl, fn)
  ! Nil

let foreach[A](ls: List[A], fn: A -> Unit) = ls | fold(Nothing) {_, x -> fn x}

// Smart constructors for List
let List = Nil
let List[A](x1: A) = 
  Cons(x1, List)
let List[A](x1: A, x2: A) = 
  Cons(x1, List(x2))
let List[A](x1: A, x2: A, x3: A) = 
  Cons(x1, List(x2, x3))
let List[A](x1: A, x2: A, x3: A, x4: A) = 
  Cons(x1, List(x2, x3, x4))
let List[A](x1: A, x2: A, x3: A, x4: A, x5: A) = 
  Cons(x1, List(x2, x3, x4, x5))
let List[A](x1: A, x2: A, x3: A, x4: A, x5: A, x6: A) = 
  Cons(x1, List(x2, x3, x4, x5, x6))
let List[A](x1: A, x2: A, x3: A, x4: A, x5: A, x6: A, x7: A) = 
  Cons(x1, List(x2, x3, x4, x5, x6, x7))
let List[A](x1: A, x2: A, x3: A, x4: A, x5: A, x6: A, x7: A, x8: A) = 
  Cons(x1, List(x2, x3, x4, x5, x6, x7, x8))
let List[A](x1: A, x2: A, x3: A, x4: A, x5: A, x6: A, x7: A, x8: A, x9: A) = 
  Cons(x1, List(x2, x3, x4, x5, x6, x7, x8, x9))
let List[A](x1: A, x2: A, x3: A, x4: A, x5: A, x6: A, x7: A, x8: A, x9: A, x10: A) = 
  Cons(x1, List(x2, x3, x4, x5, x6, x7, x8, x9, x10))

// A Range type that can be treated as List
tuple Range(from: Int, to: Int)

let head(r: Range) = r 
  ? Range(from, to) when (from <= to) -> from
  ! fail "An empty range."

let tail(r: Range) = r 
  ? Range(from, to) when (from <= to) -> Range(from + 1, to)
  ! fail "An empty range."

let empty(r: Range) = r | Range(from, to) -> from > to

let size(r: Range) = r | Range(from, to) -> to - from + 1

let take(r: Range, n: Int) = r
  ? Range(from, to) when (from + n <= to) -> Range(from, from + n)
  ! fail "An empty range."

let map[A](r: Range, fn: Int -> A) = r | Range(from, to) -> mapRangeLoop(from, to, fn)
let mapRangeLoop[A](from: Int, to: Int, fn: Int -> A) = 
  if (from > to) Nil
  else fn from | cons mapRangeLoop(from + 1, to, fn)

let fold[A](r: Range, neutral: A) = r | map _ | fold neutral 

let reduce(r: Range, fn: Int * Int -> Int) = r | map _ | reduce fn

let filter(r: Range, fn: Int -> Boolean) = r | map _ | filter fn

let foreach(r: Range, fn: Int -> Unit) = r | fold(Nothing) {_, x -> fn x}

// Functions for coverting given string into primite type value
let Int(s: String) = `Integer.valueOf(s)` as Int
let Real(s: String) = `Double.valueOf(s)` as Real
let Boolean(s: String) = `Boolean.valueOf(s)` as Boolean

// The important functions for String conversion
let String[A](ls: List[A]) = "List(" + stringListLoop(ls) + ")"
let stringListLoop[A](ls: List[A]) = ls 
  ? Cons(hd, Cons(_, _)) -> hd + ", "
  ? Cons(hd, _) -> hd
  ! ""

// Math routines
let min[#A](x: A, y: A) = if (x < y) x else y
let max[#A](x: A, y: A) = if (x > y) x else y
let abs(x: Int) = if (x > 0) x else -x
let abs(x: Real) = if (x > 0.0) x else -x
let sqrt(x: Real) = `Math.sqrt(x)` as Real
let power(x: Real, y: Real) = `Math.power(x, y)` as Real

// Other usefull functions
let not(b: Boolean) = if (b) false else true
let ??? = fail "Not implemented yet! Be patient!"
let println(s: String) = `System.out.println(s)` as Unit
